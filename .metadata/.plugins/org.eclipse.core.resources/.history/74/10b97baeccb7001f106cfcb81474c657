package com.ecom.service.impl;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Service;
import org.springframework.util.ObjectUtils;
import org.springframework.web.multipart.MultipartFile;

import com.ecom.model.Product;
import com.ecom.repository.ProductRepository;
import com.ecom.service.ProductService;

@Service
public class ProductServiceImpl implements ProductService {

	@Autowired
	private ProductRepository productRepository;

	@Override
	public Product saveProduct(Product product) {

		return productRepository.save(product);
	}

	@Override
	public List<Product> getAllProducts() {

		return productRepository.findAll();
	}

	@Override
	public Boolean deleteProduct(int id) {

		Product product = productRepository.findById(id).orElse(null);

		if (!ObjectUtils.isEmpty(product)) {

			productRepository.delete(product);
			return true;
		}

		return false;
	}

	@Override
	public Product getProductById(int id) {
		Product product = productRepository.findById(id).orElse(null);
		return product;
	}

	@Override
	public Product updateProduct(Product product, MultipartFile image) {

		// Fetch the old product details
		Product oldProduct = getProductById(product.getId());

		if (oldProduct == null) {
			throw new IllegalArgumentException("Product not found with ID: " + product.getId());
		}

		// Determine the image name
		String imageName = oldProduct.getImage(); // Default to the existing image
		if (!image.isEmpty()) {
			imageName = image.getOriginalFilename();
			try {
				// Save the new image to the directory
				File saveFile = new ClassPathResource("static/img").getFile();
				Path uploadPath = Paths.get(saveFile.getAbsolutePath(), "product_img", imageName);

				// Ensure the directory exists
				Files.createDirectories(uploadPath.getParent());
				Files.copy(image.getInputStream(), uploadPath, StandardCopyOption.REPLACE_EXISTING);
			} catch (IOException e) {
				throw new RuntimeException("Failed to store image file: " + e.getMessage(), e);
			}
		}

		// Update product details
		oldProduct.setTitle(product.getTitle());
		oldProduct.setImage(imageName);
		oldProduct.setDescription(product.getDescription());
		oldProduct.setStock(product.getStock());
		oldProduct.setCategory(product.getCategory());
		oldProduct.setPrice(product.getPrice());

		// Save and return the updated product
		return productRepository.save(oldProduct);
	}

}
